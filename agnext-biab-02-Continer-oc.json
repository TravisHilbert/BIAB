{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.92.45157",
      "templateHash": "13775284561358487536"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "EastUS2",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "azureOpenAILocation": {
      "type": "string",
      "defaultValue": "EastUS",
      "metadata": {
        "description": "Location for OpenAI resources."
      }
    },
    "prefix": {
      "type": "string",
      "defaultValue": "biab",
      "metadata": {
        "description": "A prefix to add to the start of all resource names. Note: A \"unique\" suffix will also be added"
      }
    },
    "containerImageNameTag": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The container image name and tag to deploy to the container app, if this is not set the container app just default to an empty image"
      }
    },
    "visitorPassword": {
      "type": "securestring",
      "defaultValue": "AIABDemo",
      "metadata": {
        "description": "The visitor code/password that must be provided to access the container app. If left as-is, a new password will be generated and output. If this is set to empty a new code will be generated on each restart."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to apply to all deployed resources"
      }
    },
    "resourceSize": {
      "type": "object",
      "properties": {
        "gpt4oCapacity": {
          "type": "int"
        },
        "cosmosThroughput": {
          "type": "int"
        },
        "containerAppSize": {
          "type": "object",
          "properties": {
            "cpu": {
              "type": "string"
            },
            "memory": {
              "type": "string"
            },
            "minReplicas": {
              "type": "int"
            },
            "maxReplicas": {
              "type": "int"
            }
          }
        }
      },
      "defaultValue": {
        "gpt4oCapacity": 15,
        "cosmosThroughput": 400,
        "containerAppSize": {
          "cpu": "1.0",
          "memory": "2.0Gi",
          "minReplicas": 0,
          "maxReplicas": 1
        }
      },
      "metadata": {
        "description": "The size of the resources to deploy, defaults to a mini size"
      }
    }
  },
  "variables": {
    "uniqueNameFormat": "[format('{0}-{{0}}-{1}', parameters('prefix'), uniqueString(resourceGroup().id, parameters('prefix')))]",
    "uniqueShortNameFormat": "[format('{0}{{0}}{1}', toLower(parameters('prefix')), uniqueString(resourceGroup().id, parameters('prefix')))]",
    "aoaiApiVersion": "2024-08-01-preview",
    "emptyContainerImage": "alpine:latest"
  },
  "resources": {
    "openai::gpt4o": {
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2023-10-01-preview",
      "name": "[format('{0}/{1}', format(variables('uniqueNameFormat'), 'openai'), 'gpt-4o')]",
      "sku": {
        "name": "GlobalStandard",
        "capacity": "[parameters('resourceSize').gpt4oCapacity]"
      },
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "gpt-4o",
          "version": "2024-08-06"
        },
        "versionUpgradeOption": "NoAutoUpgrade"
      },
      "dependsOn": [
        "openai"
      ]
    },
    "cosmos::autogenDb::memoryContainer": {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2024-05-15",
      "name": "[format('{0}/{1}/{2}', format(variables('uniqueNameFormat'), 'cosmos'), 'autogen', 'memory')]",
      "properties": {
        "resource": {
          "id": "memory",
          "partitionKey": {
            "kind": "Hash",
            "version": 2,
            "paths": [
              "/session_id"
            ]
          }
        }
      },
      "dependsOn": [
        "cosmos::autogenDb"
      ]
    },
    "cosmos::contributorRoleDefinition": {
      "existing": true,
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
      "apiVersion": "2024-05-15",
      "name": "[format('{0}/{1}', format(variables('uniqueNameFormat'), 'cosmos'), '00000000-0000-0000-0000-000000000002')]",
      "dependsOn": [
        "cosmos"
      ]
    },
    "cosmos::autogenDb": {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2024-05-15",
      "name": "[format('{0}/{1}', format(variables('uniqueNameFormat'), 'cosmos'), 'autogen')]",
      "properties": {
        "resource": {
          "id": "autogen",
          "createMode": "Default"
        },
        "options": {
          "throughput": "[parameters('resourceSize').cosmosThroughput]"
        }
      },
      "dependsOn": [
        "cosmos"
      ]
    },
    "containerAppEnv::aspireDashboard": {
      "type": "Microsoft.App/managedEnvironments/dotNetComponents",
      "apiVersion": "2024-02-02-preview",
      "name": "[format('{0}/{1}', format(variables('uniqueNameFormat'), 'containerapp'), 'aspire-dashboard')]",
      "properties": {
        "componentType": "AspireDashboard"
      },
      "dependsOn": [
        "containerAppEnv"
      ]
    },
    "logAnalytics": {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "name": "[format(variables('uniqueNameFormat'), 'logs')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "retentionInDays": 30,
        "sku": {
          "name": "PerGB2018"
        }
      }
    },
    "appInsights": {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[format(variables('uniqueNameFormat'), 'appins')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format(variables('uniqueNameFormat'), 'logs'))]"
      },
      "dependsOn": [
        "logAnalytics"
      ]
    },
    "openai": {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2023-10-01-preview",
      "name": "[format(variables('uniqueNameFormat'), 'openai')]",
      "location": "[parameters('azureOpenAILocation')]",
      "tags": "[parameters('tags')]",
      "kind": "OpenAI",
      "sku": {
        "name": "S0"
      },
      "properties": {
        "customSubDomainName": "[format(variables('uniqueNameFormat'), 'openai')]"
      }
    },
    "aoaiUserRoleDefinition": {
      "existing": true,
      "type": "Microsoft.Authorization/roleDefinitions",
      "apiVersion": "2022-05-01-preview",
      "name": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd"
    },
    "acaAoaiRoleAssignment": {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', format(variables('uniqueNameFormat'), 'openai'))]",
      "name": "[guid(resourceId('Microsoft.App/containerApps', format('{0}-backend', parameters('prefix'))), resourceId('Microsoft.CognitiveServices/accounts', format(variables('uniqueNameFormat'), 'openai')), resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'))]",
      "properties": {
        "principalId": "[reference('containerApp', '2024-03-01', 'full').identity.principalId]",
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "aoaiUserRoleDefinition",
        "containerApp",
        "openai"
      ]
    },
    "cosmos": {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2024-05-15",
      "name": "[format(variables('uniqueNameFormat'), 'cosmos')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "enableFreeTier": false,
        "locations": [
          {
            "failoverPriority": 0,
            "locationName": "[parameters('location')]"
          }
        ]
      }
    },
    "existingAcr": {
      "existing": true,
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-04-01",
      "name": "biabcontainerreg"
    },
    "pullIdentity": {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-07-31-preview",
      "name": "[format(variables('uniqueNameFormat'), 'containerapp-pull')]",
      "location": "[parameters('location')]"
    },
    "acrPullDefinition": {
      "existing": true,
      "type": "Microsoft.Authorization/roleDefinitions",
      "apiVersion": "2022-05-01-preview",
      "name": "7f951dda-4ed3-4680-a7ca-43fe172d538d"
    },
    "roleAssignment": {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', 'biabcontainerreg'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format(variables('uniqueNameFormat'), 'containerapp-pull')), resourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d'))]",
      "properties": {
        "principalId": "[reference('pullIdentity').principalId]",
        "principalType": "ServicePrincipal",
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
      },
      "dependsOn": [
        "acrPullDefinition",
        "existingAcr",
        "pullIdentity"
      ]
    },
    "containerAppEnv": {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2024-03-01",
      "name": "[format(variables('uniqueNameFormat'), 'containerapp')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "daprAIConnectionString": "[reference('appInsights').ConnectionString]",
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[reference('logAnalytics').customerId]",
            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format(variables('uniqueNameFormat'), 'logs')), '2023-09-01').primarySharedKey]"
          }
        }
      },
      "dependsOn": [
        "appInsights",
        "logAnalytics"
      ]
    },
    "acaCosomsRoleAssignment": {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
      "apiVersion": "2024-05-15",
      "name": "[format('{0}/{1}', format(variables('uniqueNameFormat'), 'cosmos'), guid(resourceId('Microsoft.App/containerApps', format('{0}-backend', parameters('prefix'))), resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', format(variables('uniqueNameFormat'), 'cosmos'), '00000000-0000-0000-0000-000000000002')))]",
      "properties": {
        "principalId": "[reference('containerApp', '2024-03-01', 'full').identity.principalId]",
        "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', format(variables('uniqueNameFormat'), 'cosmos'), '00000000-0000-0000-0000-000000000002')]",
        "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', format(variables('uniqueNameFormat'), 'cosmos'))]"
      },
      "dependsOn": [
        "containerApp",
        "cosmos"
      ]
    },
    "containerApp": {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2024-03-01",
      "name": "[format('{0}-backend', parameters('prefix'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": {
        "type": "SystemAssigned, UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format(variables('uniqueNameFormat'), 'containerapp-pull')))]": {}
        }
      },
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', format(variables('uniqueNameFormat'), 'containerapp'))]",
        "configuration": {
          "ingress": {
            "targetPort": 8000,
            "external": true
          },
          "activeRevisionsMode": "Single"
        },
        "template": {
          "scale": {
            "minReplicas": "[parameters('resourceSize').containerAppSize.minReplicas]",
            "maxReplicas": "[parameters('resourceSize').containerAppSize.maxReplicas]",
            "rules": [
              {
                "name": "http-scaler",
                "http": {
                  "metadata": {
                    "concurrentRequests": "100"
                  }
                }
              }
            ]
          },
          "containers": [
            {
              "name": "backend",
              "image": "biabcontainerreg.azurecr.io/biabbackend:dev",
              "resources": {
                "cpu": "[json(parameters('resourceSize').containerAppSize.cpu)]",
                "memory": "[parameters('resourceSize').containerAppSize.memory]"
              },
              "env": [
                {
                  "name": "COSMOSDB_ENDPOINT",
                  "value": "[reference('cosmos').documentEndpoint]"
                },
                {
                  "name": "COSMOSDB_DATABASE",
                  "value": "autogen"
                },
                {
                  "name": "COSMOSDB_CONTAINER",
                  "value": "memory"
                },
                {
                  "name": "AZURE_OPENAI_ENDPOINT",
                  "value": "[reference('openai').endpoint]"
                },
                {
                  "name": "AZURE_OPENAI_DEPLOYMENT_NAME",
                  "value": "gpt-4o"
                },
                {
                  "name": "AZURE_OPENAI_API_VERSION",
                  "value": "[variables('aoaiApiVersion')]"
                },
                {
                  "name": "VISITOR_PASSWORD",
                  "value": "[parameters('visitorPassword')]"
                },
                {
                  "name": "DEV_BYPASS_AUTH",
                  "value": "true"
                },
                {
                  "name": "FRONTEND_SITE_NAME",
                  "value": "[format('{0}.azurewebsites.net', format(variables('uniqueNameFormat'), 'frontend'))]"
                }
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "cosmos::autogenDb",
        "containerAppEnv",
        "cosmos",
        "openai::gpt4o",
        "cosmos::autogenDb::memoryContainer",
        "openai",
        "pullIdentity"
      ]
    },
    "frontendAppServicePlan": {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[format(variables('uniqueNameFormat'), 'frontend-plan')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "P1v2",
        "capacity": 1,
        "tier": "PremiumV2"
      },
      "properties": {
        "reserved": true
      },
      "kind": "linux"
    },
    "frontendAppService": {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[format(variables('uniqueNameFormat'), 'frontend')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "app,linux,container",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format(variables('uniqueNameFormat'), 'frontend-plan'))]",
        "reserved": true,
        "siteConfig": {
          "linuxFxVersion": "DOCKER|biabcontainerreg.azurecr.io/biabfrontend:dev",
          "appSettings": [
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "https://biabcontainerreg.azurecr.io"
            },
            {
              "name": "WEBSITES_PORT",
              "value": "3000"
            },
            {
              "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
              "value": "1800"
            },
             {
              "name": "FRONTEND_SITE_NAME",
              "value": "[format('https://{0}.azurewebsites.net', format(variables('uniqueNameFormat'), 'frontend'))]"
            }
          ]
        }
      },
      "identity": {
        "type": "SystemAssigned,UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format(variables('uniqueNameFormat'), 'containerapp-pull')))]": {}
        }
      },
      "dependsOn": [
        "containerApp",
        "frontendAppServicePlan",
        "pullIdentity"
      ]
    }
  },
  "outputs": {
    "cosmosAssignCli": {
      "type": "string",
      "value": "[format('az cosmosdb sql role assignment create --resource-group \"{0}\" --account-name \"{1}\" --role-definition-id \"{2}\" --scope \"{3}\" --principal-id \"fill-in\"', resourceGroup().name, format(variables('uniqueNameFormat'), 'cosmos'), resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', format(variables('uniqueNameFormat'), 'cosmos'), '00000000-0000-0000-0000-000000000002'), resourceId('Microsoft.DocumentDB/databaseAccounts', format(variables('uniqueNameFormat'), 'cosmos')))]"
    }
  }
}
